package com.example.iotapp;

import android.app.PendingIntent;
import android.content.Intent;
import android.os.Bundle;
import android.os.VibrationEffect;
import android.util.Log;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
//import mqtt library
import org.eclipse.paho.android.service.MqttAndroidClient;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;

import org.json.JSONException;
import org.json.JSONObject;

import android.os.Vibrator;



public class RemoteActivity extends AppCompatActivity {
    String BROKER_URL = Constant.MQTTURL + ":1883";

    //Client ID generated by paho library
    String CLIENT_ID = MqttClient.generateClientId();
    private MqttHandler mqttHandler;

    private ImageView btnIO,btnMute,btn1,btn2,btn3,btn4,btn5,btn6,btn7,btn8,btn9,btn0;
    private ImageView btnRed,btnGreen,btnYellow,btnBlue,btnBack,btnMenu;
    private ImageView btnVolUp,btnVolDown,btnChUp,btnChDown, btnInfo;
    private ImageView btnUp,btnDown,btnLeft,btnRight;
    private TextView btnOK,btnGuide,btnExit;
    private String topic = "esp32/output_server";
    private JSONObject irJsonObject = new JSONObject();
    private String ir_codes = "";
    private String MAC = "";
    private String message = "";
    private String ir_code = "";
    private String deviceCateID = "";
    private String irProtocol = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(
                WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN
        );
        setContentView(R.layout.layout_remote);
        ir_codes = getIntent().getStringExtra("irCodes");
        deviceCateID = getIntent().getStringExtra("deviceCateID");
        Log.d("DeviceCateID",deviceCateID);
        try {
            irJsonObject = new JSONObject(ir_codes);
        } catch (Exception e) {
            e.printStackTrace();
        }
        MAC = getIntent().getStringExtra("MAC");
        //Log the irJsonObject
        Log.d("IRJSON",irJsonObject.toString());
        Log.d("MAC",MAC);
        //vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
        initButton();
        init();
        initButtonAction();
    }

    private void initButton()
    {
        btnIO = findViewById(R.id.btnIO);
        btnMute = findViewById(R.id.btnMute);
        btn1 = findViewById(R.id.btn1);
        btn2 = findViewById(R.id.btn2);
        btn3 = findViewById(R.id.btn3);
        btn4 = findViewById(R.id.btn4);
        btn5= findViewById(R.id.btn5);
        btn6= findViewById(R.id.btn6);
        btn7= findViewById(R.id.btn7);
        btn8= findViewById(R.id.btn8);
        btn9= findViewById(R.id.btn9);
        btn0= findViewById(R.id.btn0);
        btnRed= findViewById(R.id.btnRed);
        btnGreen= findViewById(R.id.btnGreen);
        btnYellow= findViewById(R.id.btnYellow);
        btnBlue= findViewById(R.id.btnBlue);
        btnGuide= findViewById(R.id.btnGuide);
        btnExit= findViewById(R.id.btnExit);
        btnBack= findViewById(R.id.btnBack);
        btnMenu= findViewById(R.id.btnMenu);
        btnVolUp= findViewById(R.id.btnVolUp);
        btnVolDown= findViewById(R.id.btnVolDown);
        btnChUp= findViewById(R.id.btnChUp);
        btnChDown= findViewById(R.id.btnChDown);
        btnInfo= findViewById(R.id.btnInfo);
        btnUp= findViewById(R.id.btnUp);
        btnDown= findViewById(R.id.btnDown);
        btnLeft= findViewById(R.id.btnLeft);
        btnRight= findViewById(R.id.btnRight);
        btnOK= findViewById(R.id.btnOK);
    }
    private void setupButtonClickListener(ImageView button, String key) {
        button.setOnClickListener(view -> {
            //vibrate when click
            //performHapticFeedback();
            try {
                JSONObject object = new JSONObject(ir_codes);
                irProtocol = object.getString("protocol");
                ir_code = object.getString(key);
                Log.d("IRCODE", ir_code);
                message = "{\"data\":{\"macID\":\"" + MAC + "\",\"remote\":{\"irProtocol\":\"" + irProtocol + "\",\"command\":\"" + ir_code + "\"}}}";
                mqttHandler.publish(topic, message);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        });
    }
    private void setupTextViewClickListener(TextView button, String key) {
        button.setOnClickListener(view -> {
            //vibrate when click
            //performHapticFeedback();
            try {
                JSONObject object = new JSONObject(ir_codes);
                irProtocol = object.getString("protocol");
                ir_code = object.getString(key);
                Log.d("IRCODE", ir_code);
                message = "{\"data\":{\"macID\":\"" + MAC + "\",\"remote\":{\"irProtocol\":\"" + irProtocol + "\",\"command\":\"" + ir_code + "\"}}}";
                mqttHandler.publish(topic, message);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        });
    }

    private void initButtonAction()
    {
        setupButtonClickListener(btnIO, "pw");
        setupButtonClickListener(btnMute, "mute");
        setupButtonClickListener(btn1, "1");
        setupButtonClickListener(btn2, "2");
        setupButtonClickListener(btn3, "3");
        setupButtonClickListener(btn4, "4");
        setupButtonClickListener(btn5, "5");
        setupButtonClickListener(btn6, "6");
        setupButtonClickListener(btn7, "7");
        setupButtonClickListener(btn8, "8");
        setupButtonClickListener(btn9, "9");
        setupButtonClickListener(btn0, "0");
        setupButtonClickListener(btnRed, "r");
        setupButtonClickListener(btnGreen, "g");
        setupButtonClickListener(btnYellow, "y");
        setupButtonClickListener(btnBlue, "b");
        setupTextViewClickListener(btnGuide, "guide");
        setupTextViewClickListener(btnExit, "exit");
        setupButtonClickListener(btnBack, "back");
        setupButtonClickListener(btnMenu, "menu");
        setupButtonClickListener(btnVolUp, "vol+");
        setupButtonClickListener(btnVolDown, "vol-");
        setupButtonClickListener(btnChUp, "ch+");
        setupButtonClickListener(btnChDown, "ch-");
        setupButtonClickListener(btnInfo, "i");
        setupButtonClickListener(btnUp, "up");
        setupButtonClickListener(btnDown, "down");
        setupButtonClickListener(btnLeft, "left");
        setupButtonClickListener(btnRight, "right");
        setupTextViewClickListener(btnOK, "ok");
    }
private void init() {
        mqttHandler = new MqttHandler();
        mqttHandler.connect(BROKER_URL,CLIENT_ID);
    }
}
